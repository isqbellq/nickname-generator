{"version":3,"sources":["components/Date.js","components/HelloWorld.js","components/Alert.js","components/Converter.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["CurrentDate","today","Date","day","getDate","concat","month","getMonth","year","getFullYear","todayFull","dayOfWeek","getDay","react_default","a","createElement","className","Component","HelloWorld","HelloWorld_Hello","HelloWorld_World","Hello","World","_this","this","onClick","props","sayHi","Alert","console","log","Converter","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChangeCurrency","setState","currency","state","Converter_Currency","Converter_CurrencySwitcher","Currency","CurrencySwitcher","Form","handleChange","event","username","target","value","handleSubmit","alert","file","current","files","name","preventDefault","React","createRef","onSubmit","type","ref","onChange","App","components_Date","components_HelloWorld","components_Alert","components_Converter","components_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.46f90c94.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass CurrentDate extends Component {\r\n\trender() {\r\n\t\tconst today = new Date();\r\n\t\tconst day = today.getDate() < 10 ? `0${today.getDate()}` : today.getDate();\r\n\t\tconst month = (today.getMonth() + 1) < 10 ? `0${today.getMonth()}` : today.getMonth();;\r\n\t\tconst year = today.getFullYear();\r\n\r\n\t\tconst todayFull = `${day}/${month}/${year}`;\r\n\r\n\t\tlet dayOfWeek = \"\";\r\n\t\tif (today.getDay() === 0) {\r\n\t\t\tdayOfWeek = \"Sunday\";\r\n\t    }\r\n\t    if (today.getDay() === 1) {\r\n\t\t\tdayOfWeek = \"Monday\";\r\n\t    }\r\n\t    if (today.getDay() === 2) {\r\n\t\t\tdayOfWeek = \"Tuesday\";\r\n\t    }\r\n\t    if (today.getDay() === 3) {\r\n\t\t\tdayOfWeek = \"Wednesday\";\r\n\t    }\r\n\t    if (today.getDay() === 4) {\r\n\t\t\tdayOfWeek = \"Thursday\";\r\n\t    }\r\n\t    if (today.getDay() === 5) {\r\n\t\t\tdayOfWeek = \"Friday\";\r\n\t    }\r\n\t\tif (today.getDay() === 6) {\r\n\t\t\tdayOfWeek = \"Saturday\";\r\n\t    }\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"today\">\r\n\t\t\t    <h1>Hello, today's date is:</h1>\r\n\t\t\t    <p>{todayFull} and it is a {dayOfWeek}</p>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport default CurrentDate;","import React, { Component } from \"react\";\r\n\r\nclass HelloWorld extends Component {\r\n\trender() {\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"helloworld\">\r\n\t\t\t    <Hello />\r\n\t\t\t    <World />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass Hello extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<h1>Hello!</h1>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass World extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<h1 onClick={() => this.props.sayHi()}>World!</h1>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default HelloWorld;","import React, { Component } from \"react\";\r\n\r\nclass Alert extends Component {\r\n\tcomponentDidMount() {\r\n\t\tconsole.log(\"Woooooooooooooo\");\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<p>This component console.logs something as soon as it is mounted to the DOM.</p>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Alert;","import React, { Component } from \"react\";\r\n\r\nclass Converter extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcurrency: \"$\"\r\n\t\t}\r\n\t}\r\n\r\n\thandleChangeCurrency = () => {\r\n\t\tthis.setState({\r\n\t\t\tcurrency: (this.state.currency === \"$\") ? \"â‚¬\" : \"$\"\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t    <Currency currency={this.state.currency} />\r\n\t\t\t    <CurrencySwitcher currency={this.state.currency} handleChangeCurrency={this.handleChangeCurrency} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass Currency extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<p>The current currency is: {this.props.currency} !</p>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nclass CurrencySwitcher extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<button \r\n\t\t\tcurrency={this.props.currency} \r\n\t\t\tonClick={this.props.handleChangeCurrency}> \r\n\t\t\tClick to change currency.\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Converter;","import React, { Component } from \"react\";\r\n\r\nclass Form extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tusername: \"\"\r\n\t\t};\r\n\t\tthis.file = React.createRef()\r\n\t}\r\n\r\n\thandleChange = event => {\r\n\t\tthis.setState({\r\n\t\t\tusername: event.target.value\r\n\t\t});\r\n\t}\r\n\r\n\thandleSubmit = event => {\r\n\t\talert(this.state.username);\r\n\t\talert(this.file.current.files[0].name);\r\n\t\tevent.preventDefault();\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<form\r\n\t\t\tonSubmit={this.handleSubmit}\r\n\t\t\t>\r\n\t\t\t    <input \r\n\t\t\t    type=\"file\"\r\n\t\t\t    ref={this.file}\r\n\t\t\t    />\r\n\t\t\t    <input\r\n\t\t\t    type=\"text\"\r\n\t\t\t    value={this.state.username}\r\n\t\t\t    onChange={this.handleChange}\r\n\t\t\t    />\r\n\t\t\t    <input\r\n\t\t\t    type=\"submit\"\r\n\t\t\t    value=\"Submit\"\r\n\t\t\t    />\r\n\t\t\t</form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\nimport './App.css';\nimport CurrentDate from \"./components/Date\";\nimport HelloWorld from \"./components/HelloWorld\";\nimport Alert from \"./components/Alert\";\nimport Converter from \"./components/Converter\";\nimport Form from \"./components/Form\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <CurrentDate />\n          <HelloWorld />\n          <Alert />\n          <Converter />\n          <Form />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}