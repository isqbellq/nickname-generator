{"version":3,"sources":["components/GetActivity.js","components/Activity.js","components/Activities.js","App.js","serviceWorker.js","index.js"],"names":["GetActivity","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","_e$target","target","name","value","setState","defineProperty","state","start","end","activity","react_default","a","createElement","onSubmit","handleSubmit","type","placeholder","onChange","required","Component","Activity","className","style","fontStyle","duration","Activities","activities","map","components_Activity","key","App","preventDefault","components_GetActivity","components_Activities","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAqDeA,cAlDX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQPQ,aAAe,SAACC,GAAM,IAAAC,EACGD,EAAEE,OAAlBC,EADaF,EACbE,KAAMC,EADOH,EACPG,MACdZ,EAAKa,SAALZ,OAAAa,EAAA,EAAAb,CAAA,GACEU,EAAOC,KAVTZ,EAAKe,MAAQ,CACZC,MAAO,GACPC,IAAK,GACLC,SAAU,IALOlB,wEAiBrB,OACCmB,EAAAC,EAAAC,cAAA,QACIC,SAAUnB,KAAKJ,MAAMwB,cACrBJ,EAAAC,EAAAC,cAAA,SACIG,KAAK,OACLb,KAAK,QACLc,YAAY,QACZb,MAAOT,KAAKY,MAAMC,MAClBU,SAAUvB,KAAKI,aACfoB,UAAQ,IAEZR,EAAAC,EAAAC,cAAA,SACIG,KAAK,OACLb,KAAK,MACLc,YAAY,MACZb,MAAOT,KAAKY,MAAME,IAClBS,SAAUvB,KAAKI,aACfoB,UAAQ,IAEZR,EAAAC,EAAAC,cAAA,SACIG,KAAK,OACLb,KAAK,WACLc,YAAY,WACZb,MAAOT,KAAKY,MAAMG,SAClBQ,SAAUvB,KAAKI,aACfoB,UAAQ,IAEZR,EAAAC,EAAAC,cAAA,gCA7CmBO,aCaXC,EAbE,SAAA9B,GAMhB,OACCoB,EAAAC,EAAAC,cAAA,OAAKS,UAAU,YACLX,EAAAC,EAAAC,cAAA,MAAIU,MAND,CACbC,UAAW,WAKD,aAA6BjC,EAAMkC,SAAnC,eAAyDlC,EAAMmB,SAA/D,OCWGgB,EAlBI,SAAAnC,GAGf,IAAMoC,EAAapC,EAAMoC,WAAWC,IAAI,SAAAlB,GAAQ,OAC/CC,EAAAC,EAAAC,cAACgB,EAAD,CACIC,IAAKpB,EACLe,SAAUlC,EAAMkC,SAChBf,SAAUA,MAIf,OACFC,EAAAC,EAAAC,cAAA,OAAKS,UAAU,cACRK,ICsBMI,cAhCb,SAAAA,EAAYxC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoC,IACjBvC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsC,GAAAjC,KAAAH,KAAMJ,KAORwB,aAAe,SAACf,GACdR,EAAKa,SAAS,CACZoB,SAAU,CAAC,GAAI,IACfE,WAAY,CAAC,MAAO,OAEtB3B,EAAEgC,kBAXFxC,EAAKe,MAAQ,CACXkB,SAAU,CAAC,GAAI,IACfE,WAAY,CAAC,MAAO,OAJLnC,wEAiBjB,OACEmB,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACXX,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAACoB,EAAD,CACElB,aAAcpB,KAAKoB,eAErBJ,EAAAC,EAAAC,cAACqB,EAAD,CACET,SAAU9B,KAAKY,MAAMkB,SACrBE,WAAYhC,KAAKY,MAAMoB,qBA1BjBP,aCOEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e72d556d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass GetActivity extends Component {\r\n    constructor(props) {\r\n    \tsuper(props);\r\n    \tthis.state = {\r\n    \t\tstart: \"\",\r\n    \t\tend: \"\",\r\n    \t\tactivity: \"\"\r\n    \t}\r\n    }\r\n\r\n    handleChange = (e) => {\r\n    \tconst { name, value } = e.target;\r\n    \tthis.setState({\r\n    \t\t[name]: value\r\n    \t});\r\n    }\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<form\r\n\t\t\t    onSubmit={this.props.handleSubmit}>\r\n\t\t\t    <input \r\n\t\t\t        type=\"text\"\r\n\t\t\t        name=\"start\"\r\n\t\t\t        placeholder=\"Start\"\r\n\t\t\t        value={this.state.start} \r\n\t\t\t        onChange={this.handleChange}\r\n\t\t\t        required\r\n\t\t\t    />\r\n\t\t\t    <input \r\n\t\t\t        type=\"text\"\r\n\t\t\t        name=\"end\"\r\n\t\t\t        placeholder=\"End\"\r\n\t\t\t        value={this.state.end} \r\n\t\t\t        onChange={this.handleChange}\r\n\t\t\t        required\r\n\t\t\t    />\r\n\t\t\t    <input\r\n\t\t\t        type=\"text\"\r\n\t\t\t        name=\"activity\"\r\n\t\t\t        placeholder=\"Activity\"\r\n\t\t\t        value={this.state.activity} \r\n\t\t\t        onChange={this.handleChange}\r\n\t\t\t        required\r\n\t\t\t    />\r\n\t\t\t    <button>Submit</button>\r\n\t\t\t</form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default GetActivity;","import React, { Component } from \"react\";\r\n\r\nconst Activity = props => {\r\n\r\n\tconst style = {\r\n\t\tfontStyle: \"italic\",\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<div className=\"activity\">\r\n            <li style={style}>Duration: {props.duration}. Activity: {props.activity}.</li>\r\n        </div>\r\n\t);\r\n}\r\n\r\nexport default Activity;","import React, { Component } from \"react\";\r\nimport Activity from \"./Activity\";\r\n\r\nconst Activities = props => {\r\n\r\n\t// props.activities.map(...) but actually need to map both activities AND duration\r\n    const activities = props.activities.map(activity => (\r\n\t    <Activity \r\n\t        key={activity}\r\n\t        duration={props.duration}\r\n\t        activity={activity}\r\n\t    />\r\n\t));   \r\n\r\n    return (\r\n\t\t<div className=\"activities\">\r\n\t       {activities}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Activities;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport GetActivity from \"./components/GetActivity\";\nimport Activities from \"./components/Activities\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      duration: [23, 34],\n      activities: [\"boh\", \"ok\"]\n    }\n  }\n\n  handleSubmit = (e) => {\n    this.setState({\n      duration: [45, 55],\n      activities: [\"hmm\", \"k\"]\n      });\n    e.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n          <h1>Time tracker</h1>\n          <GetActivity \n            handleSubmit={this.handleSubmit}\n          />\n          <Activities \n            duration={this.state.duration}\n            activities={this.state.activities} \n          />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}